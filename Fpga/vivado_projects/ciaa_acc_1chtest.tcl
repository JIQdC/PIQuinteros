#*****************************************************************************************
# Vivado (TM) v2019.1 (64-bit)
#
# ciaa_acc_1chtest.tcl: Tcl script for re-creating project 'ciaa_acc_1chtest'
#
# Generated by Vivado on Sun Jan 31 21:06:10 -03 2021
# IP Build 2548770 on Fri May 24 18:01:18 MDT 2019
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (ciaa_acc_1chtest.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    <none>
#
# 3. The following remote source files that were added to the original project:-
#
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/debug_control.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/deserializer.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/downsampler.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/downsampler_tresh.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/adc_model/adc_model.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/tb_clk.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/adc_model/w1w2WordToggle.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/adc_model/contNbits.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/adc_model/adc_model_wrapper.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/test_fifo.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/test_adc_model_wrapper.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/test_downsampler.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/test_deser.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/test_selectio.vhd"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/test_selectio.wcfg"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/test_deser.wcfg"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/test_downsampler.wcfg"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/test_fifo.wcfg"
#    "/home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/sim/test_adc_model_wrapper.wcfg"
#
#*****************************************************************************************

# Delete vivado_project folder
file delete -force -- ciaa_acc_1chtest_proj

# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "ciaa_acc_1chtest"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "ciaa_acc_1chtest.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/../../../VivadoProjects/ciaa_acc_1chtest"]"

# Create project
create_project ${_xil_proj_name_} "ciaa_acc_1chtest_proj" -part xc7z030fbg676-2

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "www.proyecto-ciaa.com.ar:ciaa-acc:part0:1.0" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "dsa.accelerator_binary_content" -value "bitstream" -objects $obj
set_property -name "dsa.accelerator_binary_format" -value "xclbin2" -objects $obj
set_property -name "dsa.board_id" -value "ciaa-acc" -objects $obj
set_property -name "dsa.description" -value "Vivado generated DSA" -objects $obj
set_property -name "dsa.dr_bd_base_address" -value "0" -objects $obj
set_property -name "dsa.emu_dir" -value "emu" -objects $obj
set_property -name "dsa.flash_interface_type" -value "bpix16" -objects $obj
set_property -name "dsa.flash_offset_address" -value "0" -objects $obj
set_property -name "dsa.flash_size" -value "1024" -objects $obj
set_property -name "dsa.host_architecture" -value "x86_64" -objects $obj
set_property -name "dsa.host_interface" -value "pcie" -objects $obj
set_property -name "dsa.num_compute_units" -value "60" -objects $obj
set_property -name "dsa.platform_state" -value "pre_synth" -objects $obj
set_property -name "dsa.vendor" -value "xilinx" -objects $obj
set_property -name "dsa.version" -value "0.0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "target_language" -value "VHDL" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "28" -objects $obj
set_property -name "webtalk.ies_export_sim" -value "28" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "28" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "28" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "28" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "28" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "28" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "259" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../src/hdl/debug_control.vhd"] \
 [file normalize "${origin_dir}/../src/hdl/deserializer.vhd"] \
 [file normalize "${origin_dir}/../src/hdl/downsampler.vhd"] \
 [file normalize "${origin_dir}/../src/hdl/downsampler_tresh.vhd"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../src/hdl/debug_control.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../src/hdl/deserializer.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../src/hdl/downsampler.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../src/hdl/downsampler_tresh.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'sources_1' fileset file properties for local files
# None

# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "top" -value "debug_control" -objects $obj
set_property -name "top_arch" -value "arch" -objects $obj
set_property -name "top_file" -value "../src/hdl/debug_control.vhd" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Empty (no sources present)

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
set files [list \
 [file normalize "${origin_dir}/../sim/adc_model/adc_model.vhd"] \
 [file normalize "${origin_dir}/../sim/tb_clk.vhd"] \
 [file normalize "${origin_dir}/../sim/adc_model/w1w2WordToggle.vhd"] \
 [file normalize "${origin_dir}/../sim/adc_model/contNbits.vhd"] \
 [file normalize "${origin_dir}/../sim/adc_model/adc_model_wrapper.vhd"] \
 [file normalize "${origin_dir}/../sim/test_fifo.vhd"] \
 [file normalize "${origin_dir}/../sim/test_adc_model_wrapper.vhd"] \
 [file normalize "${origin_dir}/../sim/test_downsampler.vhd"] \
 [file normalize "${origin_dir}/../sim/test_deser.vhd"] \
 [file normalize "${origin_dir}/../sim/test_selectio.vhd"] \
 [file normalize "${origin_dir}/../sim/test_selectio.wcfg"] \
 [file normalize "${origin_dir}/../sim/test_deser.wcfg"] \
 [file normalize "${origin_dir}/../sim/test_downsampler.wcfg"] \
 [file normalize "${origin_dir}/../sim/test_fifo.wcfg"] \
 [file normalize "${origin_dir}/../sim/test_adc_model_wrapper.wcfg"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sim_1' fileset file properties for remote files
set file "$origin_dir/../sim/adc_model/adc_model.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../sim/tb_clk.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../sim/adc_model/w1w2WordToggle.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../sim/adc_model/contNbits.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../sim/adc_model/adc_model_wrapper.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../sim/test_fifo.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../sim/test_adc_model_wrapper.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../sim/test_downsampler.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../sim/test_deser.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj

set file "$origin_dir/../sim/test_selectio.vhd"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sim_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'sim_1' fileset file properties for local files
# None

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "test_fifo" -objects $obj
set_property -name "top_auto_set" -value "0" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj
set_property -name "xsim.simulate.runtime" -value "100ns" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Empty (no sources present)

# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files debug_control.vhd] == "" } {
  import_files -quiet -fileset sources_1 /home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/debug_control.vhd
}
if { [get_files deserializer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/deserializer.vhd
}
if { [get_files downsampler.vhd] == "" } {
  import_files -quiet -fileset sources_1 /home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/downsampler.vhd
}
if { [get_files downsampler_tresh.vhd] == "" } {
  import_files -quiet -fileset sources_1 /home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/downsampler_tresh.vhd
}


# Proc to create BD fifo_test
proc cr_bd_fifo_test { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# debug_control, deserializer, downsampler, downsampler_tresh_reg



  # CHANGE DESIGN NAME HERE
  set design_name fifo_test

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:xlslice:1.0\
  xilinx.com:ip:c_counter_binary:12.0\
  xilinx.com:ip:fifo_generator:13.2\
  xilinx.com:ip:util_vector_logic:2.0\
  xilinx.com:ip:selectio_wiz:5.1\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  debug_control\
  deserializer\
  downsampler\
  downsampler_tresh_reg\
  "

   set list_mods_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_msg_id "BD_TCL-008" "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set clk_in_n_0 [ create_bd_port -dir I -type clk clk_in_n_0 ]
  set clk_in_p_0 [ create_bd_port -dir I -type clk clk_in_p_0 ]
  set control_i_0 [ create_bd_port -dir I -from 3 -to 0 control_i_0 ]
  set data_in_from_pins_n_0 [ create_bd_port -dir I -from 1 -to 0 data_in_from_pins_n_0 ]
  set data_in_from_pins_p_0 [ create_bd_port -dir I -from 1 -to 0 data_in_from_pins_p_0 ]
  set enable_i_0 [ create_bd_port -dir I enable_i_0 ]
  set fifo_rst_0 [ create_bd_port -dir I fifo_rst_0 ]
  set io_reset_0 [ create_bd_port -dir I -type rst io_reset_0 ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_HIGH} \
 ] $io_reset_0
  set prog_full_0 [ create_bd_port -dir O prog_full_0 ]
  set rd_clk_0 [ create_bd_port -dir I -type clk rd_clk_0 ]
  set rd_en_0 [ create_bd_port -dir I rd_en_0 ]
  set rd_rst_busy_0 [ create_bd_port -dir O rd_rst_busy_0 ]
  set treshold_i_0 [ create_bd_port -dir I -from 9 -to 0 treshold_i_0 ]
  set treshold_ld_i_0 [ create_bd_port -dir I treshold_ld_i_0 ]
  set usr_w2w1_i_0 [ create_bd_port -dir I -from 27 -to 0 usr_w2w1_i_0 ]
  set wr_rst_busy_0 [ create_bd_port -dir O wr_rst_busy_0 ]

  # Create instance: bit1, and set properties
  set bit1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 bit1 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $bit1

  # Create instance: bit2, and set properties
  set bit2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 bit2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {2} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $bit2

  # Create instance: bit3, and set properties
  set bit3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 bit3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {3} \
   CONFIG.DIN_TO {3} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $bit3

  # Create instance: c_counter_binary_0, and set properties
  set c_counter_binary_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_counter_binary:12.0 c_counter_binary_0 ]
  set_property -dict [ list \
   CONFIG.AINIT_Value {1100} \
   CONFIG.CE {true} \
   CONFIG.Implementation {DSP48} \
   CONFIG.Output_Width {14} \
   CONFIG.SCLR {false} \
   CONFIG.Sync_CE_Priority {Sync_Overrides_CE} \
 ] $c_counter_binary_0

  # Create instance: debug_control_0, and set properties
  set block_name debug_control
  set block_cell_name debug_control_0
  if { [catch {set debug_control_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $debug_control_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: deserializer_0, and set properties
  set block_name deserializer
  set block_cell_name deserializer_0
  if { [catch {set deserializer_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $deserializer_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: downsampler_0, and set properties
  set block_name downsampler
  set block_cell_name downsampler_0
  if { [catch {set downsampler_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $downsampler_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: downsampler_tresh_reg_0, and set properties
  set block_name downsampler_tresh_reg
  set block_cell_name downsampler_tresh_reg_0
  if { [catch {set downsampler_tresh_reg_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $downsampler_tresh_reg_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: fifo_generator_0, and set properties
  set fifo_generator_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:fifo_generator:13.2 fifo_generator_0 ]
  set_property -dict [ list \
   CONFIG.Data_Count_Width {5} \
   CONFIG.Dout_Reset_Value {def} \
   CONFIG.Empty_Threshold_Assert_Value {4} \
   CONFIG.Empty_Threshold_Negate_Value {5} \
   CONFIG.Enable_Safety_Circuit {true} \
   CONFIG.Fifo_Implementation {Independent_Clocks_Block_RAM} \
   CONFIG.Full_Flags_Reset_Value {1} \
   CONFIG.Full_Threshold_Assert_Value {20} \
   CONFIG.Full_Threshold_Negate_Value {19} \
   CONFIG.Input_Data_Width {16} \
   CONFIG.Input_Depth {32} \
   CONFIG.Output_Data_Width {32} \
   CONFIG.Output_Depth {16} \
   CONFIG.Overflow_Flag {true} \
   CONFIG.Performance_Options {First_Word_Fall_Through} \
   CONFIG.Programmable_Full_Type {Single_Programmable_Full_Threshold_Constant} \
   CONFIG.Read_Data_Count {true} \
   CONFIG.Read_Data_Count_Width {5} \
   CONFIG.Reset_Type {Asynchronous_Reset} \
   CONFIG.Use_Extra_Logic {true} \
   CONFIG.Write_Data_Count_Width {6} \
   CONFIG.synchronization_stages {4} \
 ] $fifo_generator_0

  # Create instance: negate, and set properties
  set negate [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 negate ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {not} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_notgate.png} \
 ] $negate

  # Create instance: selectio_0, and set properties
  set selectio_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:selectio_wiz:5.1 selectio_0 ]
  set_property -dict [ list \
   CONFIG.BUS_IO_STD {LVDS_25} \
   CONFIG.BUS_SIG_TYPE {DIFF} \
   CONFIG.CLK_EN {false} \
   CONFIG.CLK_FWD_IO_STD {LVDS_25} \
   CONFIG.CLK_FWD_SIG_TYPE {DIFF} \
   CONFIG.DDR_CLK_BUF {BUFIO} \
   CONFIG.IDELAY_HIGH_PERF_MODE {true} \
   CONFIG.SELIO_ACTIVE_EDGE {DDR} \
   CONFIG.SELIO_BUS_IN_DELAY {NONE} \
   CONFIG.SELIO_CLK_IO_STD {LVDS_25} \
   CONFIG.SELIO_CLK_SIG_TYPE {DIFF} \
   CONFIG.SELIO_INTERFACE_TYPE {NETWORKING} \
   CONFIG.SERIALIZATION_FACTOR {4} \
   CONFIG.SYSTEM_DATA_WIDTH {2} \
 ] $selectio_0

  # Create port connections
  connect_bd_net -net bit0_Dout [get_bd_pins bit2/Dout] [get_bd_pins deserializer_0/frame_i] [get_bd_pins negate/Op1]
  connect_bd_net -net bit1_Dout [get_bd_pins bit1/Dout] [get_bd_pins deserializer_0/data_RE_i]
  connect_bd_net -net bit3_Dout [get_bd_pins bit3/Dout] [get_bd_pins deserializer_0/data_FE_i]
  connect_bd_net -net c_counter_binary_0_Q [get_bd_pins c_counter_binary_0/Q] [get_bd_pins debug_control_0/counter_count_i]
  connect_bd_net -net clk_in_n_0_1 [get_bd_ports clk_in_n_0] [get_bd_pins selectio_0/clk_in_n]
  connect_bd_net -net clk_in_p_0_1 [get_bd_ports clk_in_p_0] [get_bd_pins selectio_0/clk_in_p]
  connect_bd_net -net control_i_0_1 [get_bd_ports control_i_0] [get_bd_pins debug_control_0/control_i]
  connect_bd_net -net data_in_from_pins_n_0_1 [get_bd_ports data_in_from_pins_n_0] [get_bd_pins selectio_0/data_in_from_pins_n]
  connect_bd_net -net data_in_from_pins_p_0_1 [get_bd_ports data_in_from_pins_p_0] [get_bd_pins selectio_0/data_in_from_pins_p]
  connect_bd_net -net debug_control_0_counter_ce_o [get_bd_pins c_counter_binary_0/CE] [get_bd_pins debug_control_0/counter_ce_o]
  connect_bd_net -net debug_control_0_data_o [get_bd_pins debug_control_0/data_o] [get_bd_pins downsampler_0/data_i]
  connect_bd_net -net debug_control_0_valid_o [get_bd_pins debug_control_0/valid_o] [get_bd_pins downsampler_0/d_valid_i]
  connect_bd_net -net deserializer_0_d_valid_o [get_bd_pins debug_control_0/valid_i] [get_bd_pins deserializer_0/d_valid_o]
  connect_bd_net -net deserializer_0_data_o [get_bd_pins debug_control_0/data_i] [get_bd_pins deserializer_0/data_o]
  connect_bd_net -net downsampler_0_d_valid_o [get_bd_pins downsampler_0/d_valid_o] [get_bd_pins fifo_generator_0/wr_en]
  connect_bd_net -net downsampler_0_data_o [get_bd_pins downsampler_0/data_o] [get_bd_pins fifo_generator_0/din]
  connect_bd_net -net downsampler_tresh_reg_0_treshold_reg_o [get_bd_pins downsampler_0/treshold_reg_i] [get_bd_pins downsampler_tresh_reg_0/treshold_reg_o]
  connect_bd_net -net enable_i_0_1 [get_bd_ports enable_i_0] [get_bd_pins debug_control_0/enable_i]
  connect_bd_net -net fifo_generator_0_prog_full [get_bd_ports prog_full_0] [get_bd_pins fifo_generator_0/prog_full]
  connect_bd_net -net fifo_generator_0_rd_rst_busy [get_bd_ports rd_rst_busy_0] [get_bd_pins fifo_generator_0/rd_rst_busy]
  connect_bd_net -net fifo_generator_0_wr_rst_busy [get_bd_ports wr_rst_busy_0] [get_bd_pins fifo_generator_0/wr_rst_busy]
  connect_bd_net -net io_reset_0_1 [get_bd_ports io_reset_0] [get_bd_pins debug_control_0/rst_i] [get_bd_pins deserializer_0/rst_i] [get_bd_pins downsampler_0/rst_i] [get_bd_pins downsampler_tresh_reg_0/rst_i] [get_bd_pins selectio_0/io_reset]
  connect_bd_net -net rd_clk_0_1 [get_bd_ports rd_clk_0] [get_bd_pins fifo_generator_0/rd_clk]
  connect_bd_net -net rd_en_0_1 [get_bd_ports rd_en_0] [get_bd_pins fifo_generator_0/rd_en]
  connect_bd_net -net rst_0_1 [get_bd_ports fifo_rst_0] [get_bd_pins fifo_generator_0/rst]
  connect_bd_net -net selectio_0_clk_out [get_bd_pins deserializer_0/adc_clk_i] [get_bd_pins selectio_0/clk_out]
  connect_bd_net -net selectio_0_data_in_to_device [get_bd_pins bit1/Din] [get_bd_pins bit2/Din] [get_bd_pins bit3/Din] [get_bd_pins selectio_0/data_in_to_device]
  connect_bd_net -net treshold_i_0_1 [get_bd_ports treshold_i_0] [get_bd_pins downsampler_tresh_reg_0/treshold_i]
  connect_bd_net -net treshold_ld_i_0_1 [get_bd_ports treshold_ld_i_0] [get_bd_pins downsampler_0/treshold_ld_i] [get_bd_pins downsampler_tresh_reg_0/treshold_ld_i]
  connect_bd_net -net usr_w2w1_i_0_1 [get_bd_ports usr_w2w1_i_0] [get_bd_pins debug_control_0/usr_w2w1_i]
  connect_bd_net -net util_vector_logic_0_Res [get_bd_pins c_counter_binary_0/CLK] [get_bd_pins debug_control_0/clock_i] [get_bd_pins downsampler_0/d_clk_i] [get_bd_pins downsampler_tresh_reg_0/d_clk_i] [get_bd_pins fifo_generator_0/wr_clk] [get_bd_pins negate/Res]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_fifo_test()
cr_bd_fifo_test ""
set_property REGISTERED_WITH_MANAGER "1" [get_files fifo_test.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files fifo_test.bd ] 

if { [get_files debug_control.vhd] == "" } {
  import_files -quiet -fileset sources_1 /home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/debug_control.vhd
}
if { [get_files deserializer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/deserializer.vhd
}
if { [get_files downsampler.vhd] == "" } {
  import_files -quiet -fileset sources_1 /home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/downsampler.vhd
}
if { [get_files downsampler_tresh.vhd] == "" } {
  import_files -quiet -fileset sources_1 /home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/downsampler_tresh.vhd
}

#Create HDL wrappers
make_wrapper -files [get_files $proj_dir/$_xil_proj_name_.srcs/sources_1/bd/fifo_test/fifo_test.bd] -top
add_files -norecurse $proj_dir/$_xil_proj_name_.srcs/sources_1/bd/fifo_test/hdl/fifo_test_wrapper.vhd

# Proc to create BD downsampler_test
proc cr_bd_downsampler_test { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# debug_control, deserializer, downsampler, downsampler_tresh_reg



  # CHANGE DESIGN NAME HERE
  set design_name downsampler_test

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:xlslice:1.0\
  xilinx.com:ip:c_counter_binary:12.0\
  xilinx.com:ip:util_vector_logic:2.0\
  xilinx.com:ip:selectio_wiz:5.1\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  debug_control\
  deserializer\
  downsampler\
  downsampler_tresh_reg\
  "

   set list_mods_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_msg_id "BD_TCL-008" "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set clk_in_n_0 [ create_bd_port -dir I -type clk clk_in_n_0 ]
  set clk_in_p_0 [ create_bd_port -dir I -type clk clk_in_p_0 ]
  set control_i_0 [ create_bd_port -dir I -from 3 -to 0 control_i_0 ]
  set data_in_from_pins_n_0 [ create_bd_port -dir I -from 1 -to 0 data_in_from_pins_n_0 ]
  set data_in_from_pins_p_0 [ create_bd_port -dir I -from 1 -to 0 data_in_from_pins_p_0 ]
  set enable_i_0 [ create_bd_port -dir I enable_i_0 ]
  set io_reset_0 [ create_bd_port -dir I -type rst io_reset_0 ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_HIGH} \
 ] $io_reset_0
  set treshold_i_0 [ create_bd_port -dir I -from 9 -to 0 treshold_i_0 ]
  set treshold_ld_i_0 [ create_bd_port -dir I treshold_ld_i_0 ]
  set usr_w2w1_i_0 [ create_bd_port -dir I -from 27 -to 0 usr_w2w1_i_0 ]

  # Create instance: bit1, and set properties
  set bit1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 bit1 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $bit1

  # Create instance: bit2, and set properties
  set bit2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 bit2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {2} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $bit2

  # Create instance: bit3, and set properties
  set bit3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 bit3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {3} \
   CONFIG.DIN_TO {3} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $bit3

  # Create instance: c_counter_binary_0, and set properties
  set c_counter_binary_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:c_counter_binary:12.0 c_counter_binary_0 ]
  set_property -dict [ list \
   CONFIG.AINIT_Value {1100} \
   CONFIG.CE {true} \
   CONFIG.Implementation {DSP48} \
   CONFIG.Output_Width {14} \
   CONFIG.SCLR {false} \
   CONFIG.Sync_CE_Priority {Sync_Overrides_CE} \
 ] $c_counter_binary_0

  # Create instance: debug_control_0, and set properties
  set block_name debug_control
  set block_cell_name debug_control_0
  if { [catch {set debug_control_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $debug_control_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: deserializer_0, and set properties
  set block_name deserializer
  set block_cell_name deserializer_0
  if { [catch {set deserializer_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $deserializer_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: downsampler_0, and set properties
  set block_name downsampler
  set block_cell_name downsampler_0
  if { [catch {set downsampler_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $downsampler_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: downsampler_tresh_reg_0, and set properties
  set block_name downsampler_tresh_reg
  set block_cell_name downsampler_tresh_reg_0
  if { [catch {set downsampler_tresh_reg_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $downsampler_tresh_reg_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: negate, and set properties
  set negate [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 negate ]
  set_property -dict [ list \
   CONFIG.C_OPERATION {not} \
   CONFIG.C_SIZE {1} \
   CONFIG.LOGO_FILE {data/sym_notgate.png} \
 ] $negate

  # Create instance: selectio_0, and set properties
  set selectio_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:selectio_wiz:5.1 selectio_0 ]
  set_property -dict [ list \
   CONFIG.BUS_IO_STD {LVDS_25} \
   CONFIG.BUS_SIG_TYPE {DIFF} \
   CONFIG.CLK_EN {false} \
   CONFIG.CLK_FWD_IO_STD {LVDS_25} \
   CONFIG.CLK_FWD_SIG_TYPE {DIFF} \
   CONFIG.DDR_CLK_BUF {BUFIO} \
   CONFIG.IDELAY_HIGH_PERF_MODE {true} \
   CONFIG.SELIO_ACTIVE_EDGE {DDR} \
   CONFIG.SELIO_BUS_IN_DELAY {NONE} \
   CONFIG.SELIO_CLK_IO_STD {LVDS_25} \
   CONFIG.SELIO_CLK_SIG_TYPE {DIFF} \
   CONFIG.SELIO_INTERFACE_TYPE {NETWORKING} \
   CONFIG.SERIALIZATION_FACTOR {4} \
   CONFIG.SYSTEM_DATA_WIDTH {2} \
 ] $selectio_0

  # Create port connections
  connect_bd_net -net Net1 [get_bd_pins downsampler_0/rst_i] [get_bd_pins downsampler_tresh_reg_0/rst_i]
  connect_bd_net -net bit0_Dout [get_bd_pins bit2/Dout] [get_bd_pins deserializer_0/frame_i] [get_bd_pins negate/Op1]
  connect_bd_net -net bit1_Dout [get_bd_pins bit1/Dout] [get_bd_pins deserializer_0/data_RE_i]
  connect_bd_net -net bit3_Dout [get_bd_pins bit3/Dout] [get_bd_pins deserializer_0/data_FE_i]
  connect_bd_net -net c_counter_binary_0_Q [get_bd_pins c_counter_binary_0/Q] [get_bd_pins debug_control_0/counter_count_i]
  connect_bd_net -net clk_in_n_0_1 [get_bd_ports clk_in_n_0] [get_bd_pins selectio_0/clk_in_n]
  connect_bd_net -net clk_in_p_0_1 [get_bd_ports clk_in_p_0] [get_bd_pins selectio_0/clk_in_p]
  connect_bd_net -net control_i_0_1 [get_bd_ports control_i_0] [get_bd_pins debug_control_0/control_i]
  connect_bd_net -net data_in_from_pins_n_0_1 [get_bd_ports data_in_from_pins_n_0] [get_bd_pins selectio_0/data_in_from_pins_n]
  connect_bd_net -net data_in_from_pins_p_0_1 [get_bd_ports data_in_from_pins_p_0] [get_bd_pins selectio_0/data_in_from_pins_p]
  connect_bd_net -net debug_control_0_counter_ce_o [get_bd_pins c_counter_binary_0/CE] [get_bd_pins debug_control_0/counter_ce_o]
  connect_bd_net -net debug_control_0_data_o [get_bd_pins debug_control_0/data_o] [get_bd_pins downsampler_0/data_i]
  connect_bd_net -net debug_control_0_valid_o [get_bd_pins debug_control_0/valid_o] [get_bd_pins downsampler_0/d_valid_i]
  connect_bd_net -net deserializer_0_d_valid_o [get_bd_pins debug_control_0/valid_i] [get_bd_pins deserializer_0/d_valid_o]
  connect_bd_net -net deserializer_0_data_o [get_bd_pins debug_control_0/data_i] [get_bd_pins deserializer_0/data_o]
  connect_bd_net -net downsampler_tresh_reg_0_treshold_reg_o [get_bd_pins downsampler_0/treshold_reg_i] [get_bd_pins downsampler_tresh_reg_0/treshold_reg_o]
  connect_bd_net -net enable_i_0_1 [get_bd_ports enable_i_0] [get_bd_pins debug_control_0/enable_i]
  connect_bd_net -net io_reset_0_1 [get_bd_ports io_reset_0] [get_bd_pins debug_control_0/rst_i] [get_bd_pins deserializer_0/rst_i] [get_bd_pins selectio_0/io_reset]
  connect_bd_net -net selectio_0_clk_out [get_bd_pins deserializer_0/adc_clk_i] [get_bd_pins selectio_0/clk_out]
  connect_bd_net -net selectio_0_data_in_to_device [get_bd_pins bit1/Din] [get_bd_pins bit2/Din] [get_bd_pins bit3/Din] [get_bd_pins selectio_0/data_in_to_device]
  connect_bd_net -net treshold_i_0_1 [get_bd_ports treshold_i_0] [get_bd_pins downsampler_tresh_reg_0/treshold_i]
  connect_bd_net -net treshold_ld_i_0_1 [get_bd_ports treshold_ld_i_0] [get_bd_pins downsampler_0/treshold_ld_i] [get_bd_pins downsampler_tresh_reg_0/treshold_ld_i]
  connect_bd_net -net usr_w2w1_i_0_1 [get_bd_ports usr_w2w1_i_0] [get_bd_pins debug_control_0/usr_w2w1_i]
  connect_bd_net -net util_vector_logic_0_Res [get_bd_pins c_counter_binary_0/CLK] [get_bd_pins debug_control_0/clock_i] [get_bd_pins downsampler_0/d_clk_i] [get_bd_pins downsampler_tresh_reg_0/d_clk_i] [get_bd_pins negate/Res]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
common::send_msg_id "BD_TCL-1000" "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."

  close_bd_design $design_name 
}
# End of cr_bd_downsampler_test()
cr_bd_downsampler_test ""
set_property REGISTERED_WITH_MANAGER "1" [get_files downsampler_test.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files downsampler_test.bd ] 

if { [get_files deserializer.vhd] == "" } {
  import_files -quiet -fileset sources_1 /home/jiqdc/Documents/PI/PIQuinteros_repo/Fpga/src/hdl/deserializer.vhd
}

#Create HDL wrappers
make_wrapper -files [get_files $proj_dir/$_xil_proj_name_.srcs/sources_1/bd/downsampler_test/downsampler_test.bd] -top
add_files -norecurse $proj_dir/$_xil_proj_name_.srcs/sources_1/bd/downsampler_test/hdl/downsampler_test_wrapper.vhd

# Proc to create BD deser_test
proc cr_bd_deser_test { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# deserializer



  # CHANGE DESIGN NAME HERE
  set design_name deser_test

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:xlslice:1.0\
  xilinx.com:ip:selectio_wiz:5.1\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  deserializer\
  "

   set list_mods_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_msg_id "BD_TCL-008" "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set clk_in_n_0 [ create_bd_port -dir I -type clk clk_in_n_0 ]
  set clk_in_p_0 [ create_bd_port -dir I -type clk clk_in_p_0 ]
  set data_in_from_pins_n_0 [ create_bd_port -dir I -from 1 -to 0 data_in_from_pins_n_0 ]
  set data_in_from_pins_p_0 [ create_bd_port -dir I -from 1 -to 0 data_in_from_pins_p_0 ]
  set io_reset_0 [ create_bd_port -dir I -type rst io_reset_0 ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_HIGH} \
 ] $io_reset_0

  # Create instance: bit1, and set properties
  set bit1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 bit1 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {1} \
   CONFIG.DIN_TO {1} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $bit1

  # Create instance: bit2, and set properties
  set bit2 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 bit2 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {2} \
   CONFIG.DIN_TO {2} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $bit2

  # Create instance: bit3, and set properties
  set bit3 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xlslice:1.0 bit3 ]
  set_property -dict [ list \
   CONFIG.DIN_FROM {3} \
   CONFIG.DIN_TO {3} \
   CONFIG.DIN_WIDTH {4} \
   CONFIG.DOUT_WIDTH {1} \
 ] $bit3

  # Create instance: deserializer_0, and set properties
  set block_name deserializer
  set block_cell_name deserializer_0
  if { [catch {set deserializer_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_msg_id "BD_TCL-105" "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $deserializer_0 eq "" } {
     catch {common::send_msg_id "BD_TCL-106" "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: selectio_0, and set properties
  set selectio_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:selectio_wiz:5.1 selectio_0 ]
  set_property -dict [ list \
   CONFIG.BUS_IO_STD {LVDS_25} \
   CONFIG.BUS_SIG_TYPE {DIFF} \
   CONFIG.CLK_EN {false} \
   CONFIG.CLK_FWD_IO_STD {LVDS_25} \
   CONFIG.CLK_FWD_SIG_TYPE {DIFF} \
   CONFIG.DDR_CLK_BUF {BUFIO} \
   CONFIG.IDELAY_HIGH_PERF_MODE {true} \
   CONFIG.SELIO_ACTIVE_EDGE {DDR} \
   CONFIG.SELIO_BUS_IN_DELAY {NONE} \
   CONFIG.SELIO_CLK_IO_STD {LVDS_25} \
   CONFIG.SELIO_CLK_SIG_TYPE {DIFF} \
   CONFIG.SELIO_INTERFACE_TYPE {NETWORKING} \
   CONFIG.SERIALIZATION_FACTOR {4} \
   CONFIG.SYSTEM_DATA_WIDTH {2} \
 ] $selectio_0

  # Create port connections
  connect_bd_net -net bit0_Dout [get_bd_pins bit2/Dout] [get_bd_pins deserializer_0/frame_i]
  connect_bd_net -net bit1_Dout [get_bd_pins bit1/Dout] [get_bd_pins deserializer_0/data_RE_i]
  connect_bd_net -net bit3_Dout [get_bd_pins bit3/Dout] [get_bd_pins deserializer_0/data_FE_i]
  connect_bd_net -net clk_in_n_0_1 [get_bd_ports clk_in_n_0] [get_bd_pins selectio_0/clk_in_n]
  connect_bd_net -net clk_in_p_0_1 [get_bd_ports clk_in_p_0] [get_bd_pins selectio_0/clk_in_p]
  connect_bd_net -net data_in_from_pins_n_0_1 [get_bd_ports data_in_from_pins_n_0] [get_bd_pins selectio_0/data_in_from_pins_n]
  connect_bd_net -net data_in_from_pins_p_0_1 [get_bd_ports data_in_from_pins_p_0] [get_bd_pins selectio_0/data_in_from_pins_p]
  connect_bd_net -net io_reset_0_1 [get_bd_ports io_reset_0] [get_bd_pins deserializer_0/rst_i] [get_bd_pins selectio_0/io_reset]
  connect_bd_net -net selectio_0_clk_out [get_bd_pins deserializer_0/adc_clk_i] [get_bd_pins selectio_0/clk_out]
  connect_bd_net -net selectio_0_data_in_to_device [get_bd_pins bit1/Din] [get_bd_pins bit2/Din] [get_bd_pins bit3/Din] [get_bd_pins selectio_0/data_in_to_device]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  save_bd_design
common::send_msg_id "BD_TCL-1000" "WARNING" "This Tcl script was generated from a block design that has not been validated. It is possible that design <$design_name> may result in errors during validation."

  close_bd_design $design_name 
}
# End of cr_bd_deser_test()
cr_bd_deser_test ""
set_property REGISTERED_WITH_MANAGER "1" [get_files deser_test.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files deser_test.bd ] 

#Create HDL wrappers
make_wrapper -files [get_files $proj_dir/$_xil_proj_name_.srcs/sources_1/bd/deser_test/deser_test.bd] -top
add_files -norecurse $proj_dir/$_xil_proj_name_.srcs/sources_1/bd/deser_test/hdl/deser_test_wrapper.vhd


# Proc to create BD SelectIO_test
proc cr_bd_SelectIO_test { parentCell } {

  # CHANGE DESIGN NAME HERE
  set design_name SelectIO_test

  common::send_msg_id "BD_TCL-003" "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:selectio_wiz:5.1\
  "

   set list_ips_missing ""
   common::send_msg_id "BD_TCL-006" "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_msg_id "BD_TCL-115" "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  if { $bCheckIPsPassed != 1 } {
    common::send_msg_id "BD_TCL-1003" "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_msg_id "BD_TCL-100" "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_msg_id "BD_TCL-101" "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports

  # Create ports
  set clk_in_n_0 [ create_bd_port -dir I -type clk clk_in_n_0 ]
  set clk_in_p_0 [ create_bd_port -dir I -type clk clk_in_p_0 ]
  set data_in_from_pins_n_0 [ create_bd_port -dir I -from 1 -to 0 data_in_from_pins_n_0 ]
  set data_in_from_pins_p_0 [ create_bd_port -dir I -from 1 -to 0 data_in_from_pins_p_0 ]
  set io_reset_0 [ create_bd_port -dir I -type rst io_reset_0 ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_HIGH} \
 ] $io_reset_0

  # Create instance: selectio_0, and set properties
  set selectio_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:selectio_wiz:5.1 selectio_0 ]
  set_property -dict [ list \
   CONFIG.BUS_IO_STD {LVDS_25} \
   CONFIG.BUS_SIG_TYPE {DIFF} \
   CONFIG.CLK_EN {false} \
   CONFIG.CLK_FWD_IO_STD {LVDS_25} \
   CONFIG.CLK_FWD_SIG_TYPE {DIFF} \
   CONFIG.DDR_CLK_BUF {BUFIO} \
   CONFIG.IDELAY_HIGH_PERF_MODE {true} \
   CONFIG.SELIO_ACTIVE_EDGE {DDR} \
   CONFIG.SELIO_BUS_IN_DELAY {NONE} \
   CONFIG.SELIO_CLK_IO_STD {LVDS_25} \
   CONFIG.SELIO_CLK_SIG_TYPE {DIFF} \
   CONFIG.SELIO_INTERFACE_TYPE {NETWORKING} \
   CONFIG.SERIALIZATION_FACTOR {4} \
   CONFIG.SYSTEM_DATA_WIDTH {2} \
 ] $selectio_0

  # Create port connections
  connect_bd_net -net clk_in_n_0_1 [get_bd_ports clk_in_n_0] [get_bd_pins selectio_0/clk_in_n]
  connect_bd_net -net clk_in_p_0_1 [get_bd_ports clk_in_p_0] [get_bd_pins selectio_0/clk_in_p]
  connect_bd_net -net data_in_from_pins_n_0_1 [get_bd_ports data_in_from_pins_n_0] [get_bd_pins selectio_0/data_in_from_pins_n]
  connect_bd_net -net data_in_from_pins_p_0_1 [get_bd_ports data_in_from_pins_p_0] [get_bd_pins selectio_0/data_in_from_pins_p]
  connect_bd_net -net io_reset_0_1 [get_bd_ports io_reset_0] [get_bd_pins selectio_0/io_reset]

  # Create address segments


  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_SelectIO_test()
cr_bd_SelectIO_test ""
set_property REGISTERED_WITH_MANAGER "1" [get_files SelectIO_test.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files SelectIO_test.bd ] 

#Create HDL wrappers
make_wrapper -files [get_files $proj_dir/$_xil_proj_name_.srcs/sources_1/bd/SelectIO_test/SelectIO_test.bd] -top
add_files -norecurse $proj_dir/$_xil_proj_name_.srcs/sources_1/bd/SelectIO_test/hdl/SelectIO_test_wrapper.vhd
set_property top SelectIO_test_wrapper [current_fileset]

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xc7z030fbg676-2 -flow {Vivado Synthesis 2019} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2019" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "needs_refresh" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xc7z030fbg676-2 -flow {Vivado Implementation 2019} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2019" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
